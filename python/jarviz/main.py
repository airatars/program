import telebot
import config
import datetime

from telebot import types

bot = telebot.TeleBot(config.TOKEN)

#–ú–∞—Å—Å–∏–≤
name = ['–î–∂–∞—Ä–≤–∏–∑', 'Jarviz', 'Jrvz', 'jrvz', 'jz', 'j']

#–ö–æ–º–º–∞–Ω–¥—ã
@bot.message_handler(commands=['help'])
def hlp(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤—å —Å—Ç–∏–∫–µ—Ä—ã)")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
 
    markup.add(item1, item2)

    bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n1)–ú–æ–≥—É –Ω–µ–º–Ω–æ–≥–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π\n2)–ú–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä\n3)–ú–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è(/date, /time)".format(message.from_user),
    parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['time'])
def tm(message):
    now = datetime.datetime.now()
    bot.send_message(message.chat.id, str("–í—Ä–µ–º—è: ") + str(now.hour) + str(":") + str(now.minute) + str(":") + str(now.second))

@bot.message_handler(commands=['date'])
def dt(message):
    now = datetime.datetime.now()
    bot.send_message(message.chat.id, str("–î–∞—Ç–∞: ") + str(now.day) + str("/") + str(now.month) + str("/") + str(now.year))


#–°–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        sti = open("korn.tgs", "rb")
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}. –ú–µ–Ω—è –∑–æ–≤—É—Ç Jarviz.\n–Ø –≤–∞—à, –Ω–µ –æ—Å–æ–±–æ —É–º–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.".format(message.from_user, bot.get_me()), parse_mode='html')
    elif message.text.lower() in name:
        bot.send_message(message.from_user.id, '–°–ª—É—à–∞—é')
    elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
        item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
 
        markup.add(item1, item2)
 
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
    elif message.text == '–û—Ç–ø—Ä–∞–≤—å —Å—Ç–∏–∫–µ—Ä—ã)':
        bot.send_message(message.chat.id, '–í–æ—Ç, –¥–µ—Ä–∂–∏üòÅ\nhttps://t.me/addstickers/Syimple')
        
    else:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ /help')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')
 
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
                reply_markup=None)
 
            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                text="–î–ê")
 
    except Exception as e:
        print(repr(e))

bot.polling(none_stop=True)        